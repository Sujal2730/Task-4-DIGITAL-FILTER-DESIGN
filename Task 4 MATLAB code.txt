clc;
clear;
close all;

%% Filter Specifications
fs = 1000;         % Sampling frequency in Hz
fc = 100;          % Cutoff frequency in Hz
N = 50;            % Filter order (number of taps - 1)

% Normalized cutoff frequency (0 to 1)
Wn = fc / (fs/2);

%% FIR Filter Design using Hamming Window
b = fir1(N, Wn, 'low', hamming(N+1));

%% SIMULATION RESULTS

% 1. Impulse Response
figure;
stem(0:N, b, 'filled');
title('Impulse Response (FIR Coefficients)');
xlabel('Coefficient Index');
ylabel('Amplitude');
grid on;

% 2. Frequency Response
figure;
freqz(b, 1, 1024, fs);
title('Frequency Response of FIR Filter');

%% Create a Test Signal
t = 0:1/fs:1-1/fs;
x = cos(2*pi*50*t) + cos(2*pi*200*t);   % Input: 50 Hz + 200 Hz signal
noise = 0.1 * randn(size(x));          % Add small random noise
x_noisy = x + noise;

% Filter the noisy signal
y = filter(b, 1, x_noisy);

%% Time-Domain Simulation
figure;
subplot(3,1,1);
plot(t, x);
title('Original Signal (50 Hz + 200 Hz)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

subplot(3,1,2);
plot(t, x_noisy);
title('Noisy Signal');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

subplot(3,1,3);
plot(t, y);
title('Filtered Signal (Low-pass Filter Applied)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

%% PERFORMANCE ANALYSIS

% Compute FFT for frequency domain analysis
nfft = 1024;
X = abs(fft(x_noisy, nfft));
Y = abs(fft(y, nfft));
f = fs*(0:(nfft/2)-1)/nfft;

figure;
plot(f, X(1:nfft/2), 'r--', 'LineWidth', 1.2); hold on;
plot(f, Y(1:nfft/2), 'b', 'LineWidth', 1.2);
legend('Noisy Signal', 'Filtered Signal');
title('Frequency Spectrum Before and After Filtering');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

% Stopband attenuation analysis (200 Hz)
[H, f_response] = freqz(b, 1, 1024, fs);
stopband_idx = find(abs(f_response - 200) < 5);  % Around 200 Hz
attenuation_db = 20*log10(abs(H(stopband_idx(1))));
fprintf('Stopband Attenuation at 200 Hz: %.2f dB\n', attenuation_db);

% Passband ripple analysis (50 Hz region)
passband_idx = find(abs(f_response - 50) < 5);   % Around 50 Hz
passband_ripple = max(abs(H(passband_idx))) - min(abs(H(passband_idx)));
fprintf('Passband Ripple near 50 Hz: %.4f\n', passband_ripple);

% SNR improvement
snr_before = snr(x, noise);
snr_after = snr(x, x - y);
fprintf('SNR Before Filtering: %.2f dB\n', snr_before);
fprintf('SNR After Filtering:  %.2f dB\n', snr_after);
